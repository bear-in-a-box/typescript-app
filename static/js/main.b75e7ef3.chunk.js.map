{"version":3,"sources":["components/UserList/index.tsx","components/Debounce/index.tsx","contexts/ThemeContext/index.tsx","components/ChangeTheme/index.tsx","components/ShowUser/index.tsx","components/Main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserList","searchUser","sourceData","useState","filteredUsers","setFilteredUsers","useEffect","filter","Person","name","toLowerCase","includes","className","map","key","username","Debounce","onChange","e","target","value","debounceTimeout","placeholder","ThemeContext","React","createContext","ThemeProvider","children","theme","setTheme","color","backgroundColor","document","body","style","background","Provider","toggleTheme","ChangeTheme","useContext","onClick","ShowUser","showUser","setShowUser","Main","users","setUsers","axios","get","then","response","data","catch","error","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gVAmCeA,G,MAvBmB,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,WAAe,EAChBC,mBAAmB,IADH,mBACnDC,EADmD,KACpCC,EADoC,KAW1D,OARAC,qBAAU,WACND,EACIH,EAAWK,QAAO,SAACC,GAAD,OAClBA,EAAOC,KAAKC,cAAcC,SAASV,EAAWS,qBAGpD,CAACT,EAAYC,IAGX,yBAAKU,UAAU,YACX,wBAAIA,UAAU,QACTR,EAAcS,KAAI,SAACL,GAAD,OACf,wBAAIM,IAAKN,EAAOC,MACZ,8BAAOD,EAAOC,MADlB,IAEMD,EAAOO,iB,QCVlBC,G,MAXkB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjC,OACM,kBAAC,gBAAD,CACEA,SAAU,SAACC,GAAD,OAAOD,EAASC,EAAEC,OAAOC,QACnCC,gBAAiB,IACjBT,UAAU,cACVU,YAAY,6BCTTC,EAAeC,IAAMC,cAC9B,IAESC,EAA0B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACzBxB,mBAAgB,SADS,mBAC5CyB,EAD4C,KACrCC,EADqC,KAK7CC,EAAkB,UAAVF,EAAoB,QAAU,OACtCG,EAA4B,UAAVH,EAAoB,OAAS,OAKrD,OAHAI,SAASC,KAAKC,MAAMJ,MAAQA,EAC5BE,SAASC,KAAKC,MAAMC,WAAaJ,EAG7B,kBAACR,EAAaa,SAAd,CAAuBhB,MAAQ,CAACQ,QAAOS,YAVvB,WAChBR,EAAoB,UAAVD,EAAoB,OAAO,YAUhCD,ICPEW,G,MAVe,WAAO,IAAD,EACHC,qBAAWhB,GAAjCK,EADyB,EACzBA,MAAOS,EADkB,EAClBA,YACd,OACI,6BACI,4BAAQzB,UAAU,eAAe4B,QAASH,GAA1C,aACyB,UAAVT,EAAoB,OAAO,QAD1C,YCwBGa,G,MAjBkB,SAAC,GAAkB,IAAjBvC,EAAgB,EAAhBA,WAAgB,EACfC,mBAAS,IADM,mBACxCuC,EADwC,KAC9BC,EAD8B,KAG/C,OACI,kBAAC,EAAD,KACA,yBAAK/B,UAAU,cACX,yCACA,2BACA,kBAAC,EAAD,CAAUK,SAAU0B,KAEpB,kBAAC,EAAD,CAAU1C,WAAYyC,EAAUxC,WAAYA,IAC5C,kBAAC,EAAD,UCFG0C,EAnBM,WAAO,IAAD,EACGzC,mBAAS,IADZ,mBAChB0C,EADgB,KACTC,EADS,KAavB,OAXAxC,qBAAU,WACNyC,IACCC,IADD,8CAECC,MAAK,SAACC,GACHJ,EAASI,EAASC,SAErBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAElB,IAGE,6BACI,kBAAC,EAAD,CAAUnD,WAAY2C,MCVnBW,EANH,WACV,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkB,c","file":"static/js/main.b75e7ef3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './style.css';\r\n\r\ntype Props = {\r\n    searchUser:string;\r\n    sourceData:Array<Person>;\r\n}\r\ntype Person = {\r\n    name:string;\r\n    username:string;\r\n}\r\n\r\nconst UserList: React.FC<Props> = ({searchUser,sourceData}) =>{\r\n    const [filteredUsers, setFilteredUsers] = useState<Person[]>([]);\r\n    \r\n    useEffect(() => {\r\n        setFilteredUsers(\r\n            sourceData.filter((Person) =>\r\n            Person.name.toLowerCase().includes(searchUser.toLowerCase())\r\n            )\r\n        );\r\n    },[searchUser, sourceData]);\r\n\r\n    return(\r\n        <div className=\"ListHead\"> \r\n            <ol className=\"list\">\r\n                {filteredUsers.map((Person) => (\r\n                    <li key={Person.name}>\r\n                        <span>{Person.name}</span>\r\n                        @{Person.username}\r\n                    </li>\r\n            ))}\r\n            </ol>\r\n        </div>\r\n    )}\r\nexport default UserList\r\n","import React from 'react';\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport './style.css';\r\n\r\ntype Props ={\r\n   onChange:Function;\r\n}\r\n\r\nconst Debounce:React.FC<Props> = ({onChange}) => {\r\n  return(\r\n        <DebounceInput\r\n          onChange={(e) => onChange(e.target.value)}             \r\n          debounceTimeout={500}\t                \r\n          className=\"SearchInput\"\t               \r\n          placeholder=\"Search by user name...\"\t                \r\n        />      \r\n  )\r\n}\r\n\r\nexport default Debounce ;","import React, {useState} from 'react';\r\n\r\ntype Theme = \"light\" | \"dark\";\r\ntype ThemeContext = { theme: Theme; toggleTheme: () => void };\r\n\r\nexport const ThemeContext = React.createContext<ThemeContext>(\r\n    {} as ThemeContext\r\n);\r\nexport const ThemeProvider: React.FC = ({children}) => {\r\n    const [theme, setTheme] = useState<Theme>(\"light\");\r\n    const toggleTheme = () => {\r\n        setTheme (theme === \"light\" ? \"dark\":\"light\");\r\n    };\r\n    const color = theme === \"light\" ? \"black\" : \"#ddd\";\r\n    const backgroundColor = theme === \"light\" ? \"#eee\" : \"#555\";\r\n    \r\n    document.body.style.color = color;\r\n    document.body.style.background = backgroundColor;\r\n\r\n    return(\r\n        <ThemeContext.Provider value= {{theme, toggleTheme}}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};","import React, {useContext} from 'react';\r\nimport {ThemeContext} from \"../../contexts/ThemeContext\";\r\nimport './style.css';\r\n\r\nconst ChangeTheme: React.FC = () => {\r\n    const {theme, toggleTheme} = useContext(ThemeContext);\r\n    return(\r\n        <div>\r\n            <button className=\"SwitchButton\" onClick={toggleTheme}>\r\n                Switch to {theme === \"light\" ? \"dark\":\"light\"} mode\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nexport default ChangeTheme;","import React, {useState} from 'react';\r\nimport UserList from '../UserList';\r\nimport Debounce from '../Debounce';\r\nimport ChangeTheme from '../ChangeTheme';\r\nimport { ThemeProvider } from \"../../contexts/ThemeContext\";\r\nimport './style.css';\r\n\r\n\r\ntype Person={\r\n    name:string;\r\n    username:string;\r\n}\r\ntype Props ={\r\n    sourceData:Array<Person>;\r\n}\r\nconst ShowUser:React.FC<Props> = ({sourceData}) => {\r\n    const [showUser, setShowUser] = useState(\"\");\r\n\r\n    return (\r\n        <ThemeProvider>\r\n        <div className=\"SearchHead\">\r\n            <p>Users List</p>\r\n            <p>\r\n            <Debounce onChange={setShowUser} />\r\n            </p>\r\n            <UserList searchUser={showUser} sourceData={sourceData}/>\r\n            <ChangeTheme/>\r\n        </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default ShowUser\r\n","import React, {useEffect,useState} from 'react';\r\nimport axios from 'axios';\r\nimport ShowUser from '../ShowUser';\r\n\r\n\r\nconst Main:React.FC= () => {\r\n    const [users, setUsers] = useState([]);\r\n    useEffect(() => {\r\n        axios\r\n        .get(`https://jsonplaceholder.typicode.com/users`)\r\n        .then((response) =>{\r\n            setUsers(response.data);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    },[]);\r\n\r\n    return (\r\n        <div>\r\n            <ShowUser sourceData={users}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Main","import React from \"react\";\r\nimport Main from \"./components/Main\";\r\n\r\n\r\nconst App = () => {\r\n  return(\r\n      <Main />\r\n \r\n  )\r\n}\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}